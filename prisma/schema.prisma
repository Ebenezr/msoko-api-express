// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  phone          String
  image_url      String?
  password       String?
  addresses      Address[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductReview  ProductReview[]
  productPayment productPayment[]
  Orders         Orders[]
  WishList       WishList[]
  OrderList      OrderList[]
  Account        Account[]
  Session        Session[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id        Int      @id @default(autoincrement())
  phone     String
  default   Boolean?
  firstName String
  lastName  String
  county    Int
  town      Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Orders    Orders[]
}

model Product {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  price             Float
  image_url         String?
  size              String
  category          ProductCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId        Int
  review            ProductReview[]
  rating            Decimal?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  ProductInventory  ProductInventory[]
  OrderList         OrderList[]
  ProductDiscount   ProductDiscount?   @relation(fields: [productDiscountId], references: [id])
  productDiscountId Int?
  WishList          WishList[]
}

model ProductReview {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  rating      Int?
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String
  image_url String?   @default("https://res.cloudinary.com/dbkeoqmg5/image/upload/v1677308674/eeksfq1fiipbstvkwvfz.png")
  code      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model WishList {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
}

model ProductDiscount {
  id                  Int       @id @default(autoincrement())
  name                String
  percentage_discount Decimal
  active              Boolean
  code                String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  Product             Product[]
}

model ProductInventory {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @unique
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model productPayment {
  id         Int      @id @default(autoincrement())
  provider   String
  acc_number String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Orders     Orders[]
}

model ShoppingCart {
  id        Int         @id @default(autoincrement())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  status    CartStatus
  OrderList OrderList[]
}

model OrderList {
  id           Int          @id @default(autoincrement())
  product      Product      @relation(fields: [productId], references: [id])
  productId    Int
  shoppingcart ShoppingCart @relation(fields: [cartId], references: [id])
  cartId       Int
  user         User         @relation(fields: [userId], references: [id])
  userId       Int
  price        Decimal
  subTotal     Decimal
  size         String
  quantity     Int
  image_url    String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Orders {
  id               Int            @id @default(autoincrement())
  user             User           @relation(fields: [userId], references: [id])
  userId           Int
  address          Address        @relation(fields: [addressId], references: [id])
  payment          productPayment @relation(fields: [productPaymentId], references: [id])
  status           OrderStatus
  amount           Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  addressId        Int
  productPaymentId Int
}

model County {
  id          Int    @id @default(autoincrement())
  name        String @unique
  shipmentFee Float
  Town        Town[]
}

model Town {
  id       Int    @id @default(autoincrement())
  name     String @unique
  county   County @relation(fields: [countyId], references: [id], onDelete: Cascade)
  countyId Int
}

enum OrderStatus {
  PENDING
  COMPLETE
  CANCELED
}

enum CartStatus {
  Active
  Saved
}
