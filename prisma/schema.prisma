// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  name           String
  email          String           @unique
  phone          String
  image          String?
  password       String?
  addresses      Address[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ProductReview  ProductReview[]
  productPayment productPayment[]
  Orders         Orders[]
}

model Address {
  id        Int      @id @default(autoincrement())
  line1     String
  line2     String?
  county    String
  town      String
  station   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Orders    Orders[]
}

model Product {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  price             Float
  image_url         String
  size              String
  category          ProductCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId        Int
  review            ProductReview[]
  rating            Decimal?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  ProductInventory  ProductInventory[]
  OrderList         OrderList[]
  ProductDiscount   ProductDiscount?   @relation(fields: [productDiscountId], references: [id])
  productDiscountId Int?
}

model ProductReview {
  id          Int      @id @default(autoincrement())
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   Int
  rating      Int?
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String
  code      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProductDiscount {
  id                  Int       @id @default(autoincrement())
  name                String
  percentage_discount Decimal
  active              Boolean
  code                String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  Product             Product[]
}

model ProductInventory {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @unique
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model productPayment {
  id         Int      @id @default(autoincrement())
  provider   String
  acc_number String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Orders     Orders[]
}

model OrderList {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  order     Orders   @relation(fields: [orderId], references: [id])
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Orders {
  id               Int            @id @default(autoincrement())
  user             User           @relation(fields: [userId], references: [id])
  userId           Int
  address          Address        @relation(fields: [addressId], references: [id])
  payment          productPayment @relation(fields: [productPaymentId], references: [id])
  status           OrderStatus
  amount           Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  addressId        Int
  productPaymentId Int
  OrderList        OrderList[]
}

model County {
  id   Int    @id @default(autoincrement())
  name String @unique
  Town Town[]
}

model Town {
  id       Int    @id @default(autoincrement())
  name     String @unique
  county   County @relation(fields: [countyId], references: [id])
  countyId Int
}

enum OrderStatus {
  PENDING
  COMPLETE
  CANCELED
}
